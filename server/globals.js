// Generated by CoffeeScript 1.6.3
(function() {
  var http, https, mlUtils, qs;

  http = require("http");

  https = require("https");

  qs = require("querystring");

  eval("var services = " + process.env.VCAP_SERVICES + ";");

  mlUtils = services ? {
    host: '',
    port: 80,
    path: ''
  } : {
    host: 'localhost',
    port: 8082,
    path: '/statistics-utils'
  };

  exports.vars = {
    ML_UTILS: mlUtils,
    SSL_PORT: 3001,
    USABILITY_ITEMS: {
      informativeness: "Informativeness",
      understandability: "Understandability",
      confusion: "Confusion",
      distraction: "Distraction",
      readability: "Readability",
      infDensity: "Information Density",
      accessibility: "Accessibility"
    },
    WAPPU_CLASSIFIER: "moa.classifiers.bayes.NaiveBayes" //"moa.classifiers.trees.HoeffdingTree"
  };

  exports.fn = {
    httpPost: function(host, port, path, data, callback) {
      var options, output, postData, postReq;
      output = "";
      postData = qs.stringify(data);
      options = {
        host: host,
        port: port,
        path: path,
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
          "Content-Length": postData.length
        }
      };
      postReq = http.request(options, function(resp) {
        resp.on("data", function(chunk) {
          output += chunk;
        });
        resp.on("end", function() {
          callback(output);
        });
      });
      postReq.on("error", function(err) {
        console.log(err);
      });
      postReq.write(postData);
      postReq.end();
    },
    httpsGet: function(host, port, path, callback) {
      var getReq, options, output;
      output = "";
      options = {
        host: host,
        port: port,
        path: path,
        method: "GET",
        rejectUnauthorized: false
      };
      getReq = https.request(options, function(resp) {
        resp.on("data", function(chunk) {
          output += chunk;
        });
        resp.on("end", function() {
          callback(output);
        });
      });
      getReq.on("error", function(err) {
        console.log(err);
      });
      getReq.end();
    }
  };

}).call(this);
